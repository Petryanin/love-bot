package handlers

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/Petryanin/love-bot/internal/app"
	"github.com/Petryanin/love-bot/internal/db"
	"github.com/Petryanin/love-bot/internal/keyboards"
	"github.com/Petryanin/love-bot/internal/services"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

func StartHandler(app *app.App) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, upd *models.Update) {
		chatID := upd.Message.Chat.ID
		sess := app.Session.Get(chatID)

		if sess.State != services.StateRoot && !app.Session.IsStartSettingsState(chatID) {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text:   "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞üò¢",
			})
			return
		}

		b.SendChatAction(ctx, &bot.SendChatActionParams{
			ChatID: chatID,
			Action: models.ChatActionTyping,
		})

		switch sess.State {
		case services.StateRoot:
			app.Session.Reset(chatID)
			_, err := app.User.Get(ctx, db.WithChatID(chatID))
			if err != nil {
				StartSettingsHandler(app)(ctx, b, upd)
				return
			}

		case services.StateStartCity:
			startCityHandler(app)(ctx, b, upd)
			return

		case services.StateStartPartner:
			startPartnerHandler(app)(ctx, b, upd)
			return
		}

		text := "–ü—Ä–∏–≤–µ—Ç\\! –Ø *–í–∫—É—â—É—â–∞* ‚Äî —Ç–≤–æ–π —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ üíå\n\n" +
			bot.EscapeMarkdown(
				"–ú–æ–∂–µ—à—å —Å—Ä–∞–∑—É –Ω–∞–∂–∞—Ç—å –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –ø–æ–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help, "+
					"—á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.\n\n\n"+
					"–û—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:\n"+
					"–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π @Petryanin\n") +
			"–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –æ—Ç–∫—Ä—ã—Ç –∏ –≤—ã–ª–æ–∂–µ–Ω –Ω–∞ [github](https://github.com/Petryanin/love-bot)" +
			"–Ø –æ—á–µ–Ω—å —Å—Ç–∞—Ä–∞–ª—Å—è –∏ –±—É–¥—É –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω –∑–∞ ‚≠ê"

		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:      chatID,
			Text:        text,
			ReplyMarkup: keyboards.BaseReplyKeyboard(),
			ParseMode:   models.ParseModeMarkdown,
		})
	}
}

func StartSettingsHandler(app *app.App) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, upd *models.Update) {
		chatID := upd.Message.Chat.ID
		sess := app.Session.Get(chatID)
		sess.State = services.StateStartCity

		text := "–ü—Ä–∏–≤–µ—Ç\\! –Ø *–í–∫—É—â—É—â–∞* ‚Äî —Ç–≤–æ–π —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ üíå\n\n" +
			bot.EscapeMarkdown("–î–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ç–µ–±—è –ø–æ–ª—É—á—à–µ. "+
				"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Ç–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.\n\n"+
				"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã –∏ —É—á–∏—Ç—ã–≤–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö")
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    chatID,
			Text:      text,
			ParseMode: models.ParseModeMarkdown,
		})
	}
}

func startCityHandler(app *app.App) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, upd *models.Update) {
		chatID := upd.Message.Chat.ID
		text := upd.Message.Text
		sess := app.Session.Get(chatID)

		var city string
		var tz string
		var err error

		if text != "" {
			city, tz, err = app.Geo.ResolveByName(ctx, text)
			if err != nil {
				log.Print("handlers: failed to resolve geo info by city name: %w", err)
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: chatID, Text: "üßê–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ—Ä–æ–¥, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë",
				})
				return
			}
		} else if upd.Message.Location != nil {
			city, tz, err = app.Geo.ResolveByCoords(ctx, upd.Message.Location.Latitude, upd.Message.Location.Longitude)
			if err != nil {
				log.Print("handlers: failed to resolve geo info by coords: %w", err)
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: chatID, Text: "üßê–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë",
				})
				return
			}
		} else {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID, Text: "üßê–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω—è—Ç—å —Ç–∞–∫–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë",
			})
			return
		}

		sess.TempStartCity = city
		sess.TempStartTZ = tz
		sess.State = services.StateStartPartner

		msg := fmt.Sprintf("–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: *%s*\n–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: *%s*", city, tz) +
			bot.EscapeMarkdown("\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ Telegram-–Ω–∏–∫ —Ç–≤–æ–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.\n\n"+
				"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø–ª–∞–Ω—ã.")
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    chatID,
			Text:      msg,
			ParseMode: models.ParseModeMarkdown,
		})
	}
}

func startPartnerHandler(app *app.App) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, upd *models.Update) {
		chatID := upd.Message.Chat.ID
		text := upd.Message.Text
		sess := app.Session.Get(chatID)

		partnerName, err := validateTgUsername(text)
		if err != nil {
			log.Print("handlers: %w", err)
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text: "üßê–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è." +
					"–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë",
			})
			return
		}

		// todo –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —é–∑–µ—Ä-–æ–±—ä–µ–∫—Ç
		// todo –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –ª–æ–≥–∏–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
		partner, err := app.User.Get(ctx, db.WithUsername(partnerName))
		if err != nil {
			log.Print("handlers: failed to get partner: %w", err)
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text: "–£–ø—Å, –Ω–µ —Å–º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å —Ç–≤–æ–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ üòø\n\n" +
					"–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë.\n\n" +
					"–ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—â—ë –Ω–µ –±—ã–ª–æ –¥–∏–∞–ª–æ–≥–∞. " +
					"–ë—É–¥—É –∂–¥–∞—Ç—å, –ø–æ–∫–∞ –≤—ã –æ–±–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å ü§ó\n\n" +
					"–ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
			})
			return
		}

		// todo —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ª–æ–≥–∏–∫—É
		err = app.User.Upsert(ctx, chatID, upd.Message.From.Username, sess.TempStartCity, sess.TempStartTZ, partner.ChatID)
		if err != nil {
			log.Print("handlers: failed to upsert partner: %w", err)
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text: "–£–ø—Å, –Ω–µ —Å–º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å —Ç–≤–æ–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ üòø\n\n" +
					"–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë.\n\n" +
					"–ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—â—ë –Ω–µ –±—ã–ª–æ –¥–∏–∞–ª–æ–≥–∞. " +
					"–ë—É–¥—É –∂–¥–∞—Ç—å, –ø–æ–∫–∞ –≤—ã –æ–±–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å ü§ó\n\n" +
					"–ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
			})
			return
		}
		app.Session.Reset(chatID)

		if !strings.HasPrefix(text, "@") {
			text = "@" + text
		}

		msg := bot.EscapeMarkdown(
			fmt.Sprintf("–ü–∞—Ä—Ç–Ω—ë—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω: %s", text)+
				"\n\n–°—É–ø–µ—Ä, –≤—Å—ë –≥–æ—Ç–æ–≤–æ!üëç\n\n"+
				"–ú–æ–∂–µ—à—å —Å—Ä–∞–∑—É –Ω–∞–∂–∞—Ç—å –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –ø–æ–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help, "+
				"—á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.\n\n\n"+
				"–û—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:\n"+
				"–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π @Petryanin\n") +
			"–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –æ—Ç–∫—Ä—ã—Ç –∏ –≤—ã–ª–æ–∂–µ–Ω –Ω–∞ [github](https://github.com/Petryanin/love-bot)" +
			"–Ø –æ—á–µ–Ω—å —Å—Ç–∞—Ä–∞–ª—Å—è –∏ –±—É–¥—É –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω –∑–∞ ‚≠ê"

		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:      chatID,
			Text:        msg,
			ReplyMarkup: keyboards.BaseReplyKeyboard(),
			ParseMode:   models.ParseModeMarkdown,
		})
	}
}
