package handlers

import (
	"context"
	"fmt"
	"log"
	"math/rand/v2"
	"strings"
	"time"

	"github.com/Petryanin/love-bot/internal/app"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

func MagicBallHandler(app *app.App) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, update *models.Update) {
		chatID := update.Message.Chat.ID

		file, err := app.MagicBall.ImageAnswer()
		if err != nil {
			log.Print("handlers: failed to get magic ball image file: %w", err)
		}

		emulateThinkingProcess(ctx, b, update)

		b.SendSticker(ctx, &bot.SendStickerParams{
			ChatID: chatID,
			Sticker: &models.InputFileUpload{
				Data:     file,
				Filename: "sticker.webp",
			},
		})
	}
}

func emulateThinkingProcess(ctx context.Context, b *bot.Bot, update *models.Update) {
	chatID := update.Message.Chat.ID

	msg, _ := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: chatID,
		Text:   "üîÆ",
	})
	time.Sleep(1300 * time.Millisecond)

	animations := []func(){
		func() { animateDots(ctx, b, chatID, msg.ID) },
		func() { animateProgressBar(ctx, b, chatID, msg.ID) },
		func() { animateSymbols(ctx, b, chatID, msg.ID) },
	}

	animations[rand.IntN(len(animations))]()

	b.DeleteMessage(ctx, &bot.DeleteMessageParams{
		ChatID:    chatID,
		MessageID: msg.ID,
	})
}

func animateDots(ctx context.Context, b *bot.Bot, chatID int64, msgID int) {
	texts := []string{
		"üîÆ –Ø –≤–∏–∂—É —Ç—å–º—É",
		"üîÆ –û–±—Ä–∞–∑—ã –Ω–∞—á–∏–Ω–∞—é—Ç –ø—Ä–æ—è—Å–Ω—è—Ç—å—Å—è",
		"üîÆ –°—É–¥—å–±–∞ –º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è",
	}

	for _, phrase := range texts {
		for dots := 0; dots <= 3; dots++ {
			b.EditMessageText(ctx, &bot.EditMessageTextParams{
				ChatID:    chatID,
				MessageID: msgID,
				Text:      phrase + strings.Repeat(".", dots),
			})
			time.Sleep(600 * time.Millisecond)
		}
	}
}

func animateProgressBar(ctx context.Context, b *bot.Bot, chatID int64, msgID int) {
	type barStyle struct {
		filled  string
		empty   string
		caption string
	}

	styles := []barStyle{
		{"‚ñì", "‚ñë", "üîÆ –ó–∞—Ä—è–¥–∫–∞ —à–∞—Ä–∞"},
		{"‚ñ†", "‚ñ°", "üîÆ –≠–Ω–µ—Ä–≥–∏—è –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è"},
		{"üü¶", "‚¨ú", "üîÆ –û—Ä–∞–∫—É–ª –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç—Å—è"},
		{"‚ú∂", "‚ãÖ", "üîÆ –ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è"},
	}

	style := styles[rand.IntN(len(styles))]

	width := 12
	for i := 1; i <= width; i++ {
		bar := strings.Repeat(style.filled, i) + strings.Repeat(style.empty, width-i)
		b.EditMessageText(ctx, &bot.EditMessageTextParams{
			ChatID:    chatID,
			MessageID: msgID,
			Text:      fmt.Sprintf("%s...\n[%s]", style.caption, bar),
		})
		time.Sleep(500 * time.Millisecond)
	}
}

func animateSymbols(ctx context.Context, b *bot.Bot, chatID int64, msgID int) {
	patterns := []string{
		"‚éà ‚òØ ‚ò∏ ‚ò• ‚öõ ‚ôæ ‚ú¥",
		"‚öõ ‚òΩ ‚òº ‚ú™ ‚òÑ ‚ö° ‚ùÇ",
		"üúÅ üúÇ üúÉ üúÑ üùî üúö üùé",
		"ìÇÄ ìÉ† ìÜë ìèè ìÑø ìÖì ìäÉ",
		"‚úµ ‚ú∏ ‚ú∫ ‚úπ ‚ú∑ ‚ú∂ ‚ú≥",
		"‚åò ‚öô ‚öí ‚öî ‚õß ‚öö ‚ò∏",
		"‚óê ‚óì ‚óë ‚óí ‚óê ‚óì ‚óë ‚óí",
		"ùïÑùïíùïòùïöùïî ùïöùï§ ùï®ùï†ùï£ùïúùïöùïüùïò...",
	}
	for _, p := range patterns {
		b.EditMessageText(ctx, &bot.EditMessageTextParams{
			ChatID:    chatID,
			MessageID: msgID,
			Text:      fmt.Sprintf("üîÆ %s", p),
		})
		time.Sleep(700 * time.Millisecond)
	}
}
