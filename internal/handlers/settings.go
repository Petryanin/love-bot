package handlers

import (
	"context"
	"fmt"
	"log"
	"regexp"
	"time"

	"github.com/Petryanin/love-bot/internal/app"
	"github.com/Petryanin/love-bot/internal/config"
	"github.com/Petryanin/love-bot/internal/db"
	"github.com/Petryanin/love-bot/internal/keyboards"
	"github.com/Petryanin/love-bot/internal/services"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

const telegramUsernameRegex = `^[a-zA-Z][a-zA-Z0-9_]{4,31}$`

func validateTgUsername(input string) (string, error) {
	username := input
	if len(username) > 0 && username[0] == '@' {
		username = username[1:]
	}

	match, _ := regexp.MatchString(telegramUsernameRegex, username)
	if !match {
		return "", fmt.Errorf("wrong telegram username format: %s", username)
	}

	return username, nil
}

func SettingsHandler(app *app.App) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, upd *models.Update) {
		chatID := upd.Message.Chat.ID
		sess := app.Session.Get(chatID)
		text := upd.Message.Text

		var allowedMap = map[string]bool{
			config.CityBtn:    true,
			config.PartnerBtn: true,
			config.CatBtn:     true,
			config.DisableBtn: true,
			config.BackBtn:    true,
			config.CancelBtn:  true,
		}

		if sess.State == services.StateSettingsMenu && !allowedMap[text] {
			FallbackHandler(keyboards.SettingsMenuKeyboard())(ctx, b, upd)
			return
		}

		switch sess.State {
		case services.StateRoot:
			sess.State = services.StateSettingsMenu
			fallthrough

		case services.StateSettingsMenu:
			settingsMenuHandler(app)(ctx, b, upd)
			return

		case services.StateSettingsCity:
			settingsCityHandler(app)(ctx, b, upd)
			return

		case services.StateSettingsPartner:
			settingsPartnerHandler(app)(ctx, b, upd)
			return

		case services.StateSettingsCat:
			settingsCatHandler(app)(ctx, b, upd)
			return
		}

		FallbackHandler(keyboards.SettingsMenuKeyboard())(ctx, b, upd)
	}
}

func settingsMenuHandler(app *app.App) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, upd *models.Update) {
		chatID := upd.Message.Chat.ID
		text := upd.Message.Text
		sess := app.Session.Get(chatID)

		switch {
		case text == config.SettingsBtn || text == config.CancelBtn:
			user, err := app.User.Get(ctx, db.WithChatID(chatID), db.WithPartnerInfo())
			if err != nil {
				log.Print("handlers: failed to get user info: %w", err)
				app.Session.Reset(chatID)
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID:      chatID,
					Text:        "–£–ø—Å, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é üòø\n–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ",
					ReplyMarkup: keyboards.BaseReplyKeyboard(),
				})
				return
			}

			tz := user.TZ.String()

			var catTimeStr string
			catTime := user.CatTime
			if catTime.IsZero() {
				catTimeStr = "–û—Ç–∫–ª—é—á–µ–Ω—ã"
			} else {
				catTimeStr = "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ " + catTime.Format("15:04")
			}
			msg := fmt.Sprintf(
				"*–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n\n"+
					"\\- –≥–æ—Ä–æ–¥: *%s*\n"+
					"\\- —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: *%s*\n"+
					"\\- –ø–∞—Ä—Ç–Ω–µ—Ä: @%s\n"+
					"\\- –∫–æ—Ç–∏–∫–∏: *%s*",
				user.City, tz, bot.EscapeMarkdown(user.PartnerName), catTimeStr,
			)
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID:      chatID,
				Text:        msg,
				ReplyMarkup: keyboards.SettingsMenuKeyboard(),
				ParseMode:   models.ParseModeMarkdown,
			})

		case text == config.CityBtn:
			sess.State = services.StateSettingsCity
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Ç–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.\n\n" +
					"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã –∏ —É—á–∏—Ç—ã–≤–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö",
				ReplyMarkup: keyboards.CancelKeyboard(),
			})

		case text == config.PartnerBtn:
			sess.State = services.StateSettingsPartner
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ Telegram-–Ω–∏–∫ —Ç–≤–æ–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.\n\n" +
					"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø–ª–∞–Ω—ã.",
				ReplyMarkup: keyboards.CancelKeyboard(),
			})

		case text == config.CatBtn:
			sess.State = services.StateSettingsCat
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –±—É–¥—É—Ç –ø—Ä–∏–ª–µ—Ç–∞—Ç—å –∫–æ—Ç–∏–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM) " +
					"–∏–ª–∏ –Ω–∞–∂–º–∏ ¬´" + config.DisableBtn + "¬ª, —á—Ç–æ–±—ã –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏.",
				ReplyMarkup: keyboards.DisableKeyboard(),
			})

		case text == config.BackBtn:
			app.Session.Reset(chatID)
			DefaultReplyHandler(ctx, b, upd)
		}
	}
}

func settingsCityHandler(app *app.App) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, upd *models.Update) {
		chatID := upd.Message.Chat.ID
		text := upd.Message.Text
		sess := app.Session.Get(chatID)

		var city string
		var tz string
		var err error

		if text != "" {
			if text == config.CancelBtn {
				sess.State = services.StateSettingsMenu
				SettingsHandler(app)(ctx, b, upd)
				return
			}

			city, tz, err = app.Geo.ResolveByName(ctx, text)
			if err != nil {
				log.Print("handlers: failed to resolve geo info by city name: %w", err)
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: chatID, Text: "üßê–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ—Ä–æ–¥, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë",
				})
				return
			}
		} else if upd.Message.Location != nil {
			city, tz, err = app.Geo.ResolveByCoords(ctx, upd.Message.Location.Latitude, upd.Message.Location.Longitude)
			if err != nil {
				log.Print("handlers: failed to resolve geo info by coords: %w", err)
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: chatID, Text: "üßê–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë",
				})
				return
			}
		} else {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID, Text: "üßê–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω—è—Ç—å —Ç–∞–∫–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë",
			})
			return
		}

		app.User.UpdateGeo(ctx, chatID, city, tz)
		sess.State = services.StateSettingsMenu

		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:      chatID,
			Text:        fmt.Sprintf("–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: *%s*\n–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: *%s*", city, tz),
			ReplyMarkup: keyboards.SettingsMenuKeyboard(),
			ParseMode:   models.ParseModeMarkdown,
		})
	}
}

func settingsPartnerHandler(app *app.App) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, upd *models.Update) {
		chatID := upd.Message.Chat.ID
		text := upd.Message.Text
		sess := app.Session.Get(chatID)

		if text == config.CancelBtn {
			sess.State = services.StateSettingsMenu
			SettingsHandler(app)(ctx, b, upd)
			return
		}

		partnerName, err := validateTgUsername(text)
		if err != nil {
			log.Print("handlers: %w", err)
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text: "üßê–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è." +
					"–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë",
			})
			return
		}

		// todo –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —é–∑–µ—Ä-–æ–±—ä–µ–∫—Ç
		if err = app.User.UpdatePartner(ctx, chatID, partnerName); err != nil {
			log.Print("handlers: failed to update partner: %w", err)
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text: "–£–ø—Å, –Ω–µ —Å–º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å —Ç–≤–æ–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ üòø\n\n" +
					"–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë.\n\n" +
					"–ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—â—ë –Ω–µ –±—ã–ª–æ –¥–∏–∞–ª–æ–≥–∞. " +
					"–ë—É–¥—É –∂–¥–∞—Ç—å, –ø–æ–∫–∞ –≤—ã –æ–±–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å ü§ó\n\n" +
					"–ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
			})
			return
		}

		sess.State = services.StateSettingsMenu
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:      chatID,
			Text:        fmt.Sprintf("–ü–∞—Ä—Ç–Ω—ë—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω: %s", text),
			ReplyMarkup: keyboards.SettingsMenuKeyboard(),
		})
	}
}

func settingsCatHandler(app *app.App) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, upd *models.Update) {
		chatID := upd.Message.Chat.ID
		text := upd.Message.Text
		sess := app.Session.Get(chatID)

		if text == config.CancelBtn {
			sess.State = services.StateSettingsMenu
			SettingsHandler(app)(ctx, b, upd)
			return
		}

		if text == config.DisableBtn {
			err := app.User.UpdateCatTime(ctx, chatID, "")
			if err != nil {
				log.Print("handlers: %w", err)
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: chatID,
					Text:   "–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
				})
				return
			}
			sess.State = services.StateSettingsMenu
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID:      chatID,
				Text:        "üëå–•–æ—Ä–æ—à–æ, –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∫–æ—Ç–∏–∫–æ–≤",
				ReplyMarkup: keyboards.SettingsMenuKeyboard(),
			})
			return
		}

		user, err := app.User.Get(ctx, db.WithChatID(chatID))
		if err != nil {
			log.Print("handlers: failed to get user info: %w", err)
			app.Session.Reset(chatID)
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID:      chatID,
				Text:        "–£–ø—Å, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é üòø\n–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ",
				ReplyMarkup: keyboards.BaseReplyKeyboard(),
			})
			return
		}
		_, err = time.ParseInLocation("15:04", text, user.TZ)
		if err != nil {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text:   "üòø–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ –≤–∏–¥–µ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä ¬´18:30¬ª",
			})
			return
		}

		if err := app.User.UpdateCatTime(ctx, chatID, text); err != nil {
			log.Printf("handlers: UpdateCatTime error: %v", err)
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text:   "–£–ø—Å, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è üòø\n–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ",
			})
			return
		}
		sess.State = services.StateSettingsMenu
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:      chatID,
			Text:        fmt.Sprintf("‚úÖ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ %s —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏–ª–µ—Ç–∞—Ç—å –∫–æ—Ç–∏–∫–∏üòª", text),
			ReplyMarkup: keyboards.SettingsMenuKeyboard(),
		})
		return
	}
}
