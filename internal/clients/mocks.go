// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package clients

import (
	"context"
	"image"
	"io"
	"net/http"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRequester creates a new instance of MockRequester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequester(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequester {
	mock := &MockRequester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRequester is an autogenerated mock type for the Requester type
type MockRequester struct {
	mock.Mock
}

type MockRequester_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequester) EXPECT() *MockRequester_Expecter {
	return &MockRequester_Expecter{mock: &_m.Mock}
}

// BaseURL provides a mock function for the type MockRequester
func (_mock *MockRequester) BaseURL() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for BaseURL")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockRequester_BaseURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BaseURL'
type MockRequester_BaseURL_Call struct {
	*mock.Call
}

// BaseURL is a helper method to define mock.On call
func (_e *MockRequester_Expecter) BaseURL() *MockRequester_BaseURL_Call {
	return &MockRequester_BaseURL_Call{Call: _e.mock.On("BaseURL")}
}

func (_c *MockRequester_BaseURL_Call) Run(run func()) *MockRequester_BaseURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequester_BaseURL_Call) Return(s string) *MockRequester_BaseURL_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockRequester_BaseURL_Call) RunAndReturn(run func() string) *MockRequester_BaseURL_Call {
	_c.Call.Return(run)
	return _c
}

// DoRequest provides a mock function for the type MockRequester
func (_mock *MockRequester) DoRequest(ctx context.Context, method string, url string, body io.Reader, headers map[string]string) ([]byte, error) {
	ret := _mock.Called(ctx, method, url, body, headers)

	if len(ret) == 0 {
		panic("no return value specified for DoRequest")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, map[string]string) ([]byte, error)); ok {
		return returnFunc(ctx, method, url, body, headers)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, map[string]string) []byte); ok {
		r0 = returnFunc(ctx, method, url, body, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, map[string]string) error); ok {
		r1 = returnFunc(ctx, method, url, body, headers)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRequester_DoRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoRequest'
type MockRequester_DoRequest_Call struct {
	*mock.Call
}

// DoRequest is a helper method to define mock.On call
//   - ctx
//   - method
//   - url
//   - body
//   - headers
func (_e *MockRequester_Expecter) DoRequest(ctx interface{}, method interface{}, url interface{}, body interface{}, headers interface{}) *MockRequester_DoRequest_Call {
	return &MockRequester_DoRequest_Call{Call: _e.mock.On("DoRequest", ctx, method, url, body, headers)}
}

func (_c *MockRequester_DoRequest_Call) Run(run func(ctx context.Context, method string, url string, body io.Reader, headers map[string]string)) *MockRequester_DoRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), args[4].(map[string]string))
	})
	return _c
}

func (_c *MockRequester_DoRequest_Call) Return(bytes []byte, err error) *MockRequester_DoRequest_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockRequester_DoRequest_Call) RunAndReturn(run func(ctx context.Context, method string, url string, body io.Reader, headers map[string]string) ([]byte, error)) *MockRequester_DoRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHTTPClient creates a new instance of MockHTTPClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHTTPClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHTTPClient {
	mock := &MockHTTPClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHTTPClient is an autogenerated mock type for the HTTPClient type
type MockHTTPClient struct {
	mock.Mock
}

type MockHTTPClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHTTPClient) EXPECT() *MockHTTPClient_Expecter {
	return &MockHTTPClient_Expecter{mock: &_m.Mock}
}

// Do provides a mock function for the type MockHTTPClient
func (_mock *MockHTTPClient) Do(req *http.Request) (*http.Response, error) {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*http.Request) (*http.Response, error)); ok {
		return returnFunc(req)
	}
	if returnFunc, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = returnFunc(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = returnFunc(req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHTTPClient_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockHTTPClient_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - req
func (_e *MockHTTPClient_Expecter) Do(req interface{}) *MockHTTPClient_Do_Call {
	return &MockHTTPClient_Do_Call{Call: _e.mock.On("Do", req)}
}

func (_c *MockHTTPClient_Do_Call) Run(run func(req *http.Request)) *MockHTTPClient_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockHTTPClient_Do_Call) Return(response *http.Response, err error) *MockHTTPClient_Do_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockHTTPClient_Do_Call) RunAndReturn(run func(req *http.Request) (*http.Response, error)) *MockHTTPClient_Do_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCatGetter creates a new instance of MockCatGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCatGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCatGetter {
	mock := &MockCatGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCatGetter is an autogenerated mock type for the CatGetter type
type MockCatGetter struct {
	mock.Mock
}

type MockCatGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCatGetter) EXPECT() *MockCatGetter_Expecter {
	return &MockCatGetter_Expecter{mock: &_m.Mock}
}

// Image provides a mock function for the type MockCatGetter
func (_mock *MockCatGetter) Image(ctx context.Context, width int, height int) (*image.Image, error) {
	ret := _mock.Called(ctx, width, height)

	if len(ret) == 0 {
		panic("no return value specified for Image")
	}

	var r0 *image.Image
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) (*image.Image, error)); ok {
		return returnFunc(ctx, width, height)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) *image.Image); ok {
		r0 = returnFunc(ctx, width, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*image.Image)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, width, height)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCatGetter_Image_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Image'
type MockCatGetter_Image_Call struct {
	*mock.Call
}

// Image is a helper method to define mock.On call
//   - ctx
//   - width
//   - height
func (_e *MockCatGetter_Expecter) Image(ctx interface{}, width interface{}, height interface{}) *MockCatGetter_Image_Call {
	return &MockCatGetter_Image_Call{Call: _e.mock.On("Image", ctx, width, height)}
}

func (_c *MockCatGetter_Image_Call) Run(run func(ctx context.Context, width int, height int)) *MockCatGetter_Image_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockCatGetter_Image_Call) Return(image1 *image.Image, err error) *MockCatGetter_Image_Call {
	_c.Call.Return(image1, err)
	return _c
}

func (_c *MockCatGetter_Image_Call) RunAndReturn(run func(ctx context.Context, width int, height int) (*image.Image, error)) *MockCatGetter_Image_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDucklingParser creates a new instance of MockDucklingParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDucklingParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDucklingParser {
	mock := &MockDucklingParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDucklingParser is an autogenerated mock type for the DucklingParser type
type MockDucklingParser struct {
	mock.Mock
}

type MockDucklingParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDucklingParser) EXPECT() *MockDucklingParser_Expecter {
	return &MockDucklingParser_Expecter{mock: &_m.Mock}
}

// Parse provides a mock function for the type MockDucklingParser
func (_mock *MockDucklingParser) Parse(ctx context.Context, text string, ref time.Time) ([]ParseResponse, error) {
	ret := _mock.Called(ctx, text, ref)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 []ParseResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time) ([]ParseResponse, error)); ok {
		return returnFunc(ctx, text, ref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time) []ParseResponse); ok {
		r0 = returnFunc(ctx, text, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ParseResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = returnFunc(ctx, text, ref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDucklingParser_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type MockDucklingParser_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - ctx
//   - text
//   - ref
func (_e *MockDucklingParser_Expecter) Parse(ctx interface{}, text interface{}, ref interface{}) *MockDucklingParser_Parse_Call {
	return &MockDucklingParser_Parse_Call{Call: _e.mock.On("Parse", ctx, text, ref)}
}

func (_c *MockDucklingParser_Parse_Call) Run(run func(ctx context.Context, text string, ref time.Time)) *MockDucklingParser_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *MockDucklingParser_Parse_Call) Return(parseResponses []ParseResponse, err error) *MockDucklingParser_Parse_Call {
	_c.Call.Return(parseResponses, err)
	return _c
}

func (_c *MockDucklingParser_Parse_Call) RunAndReturn(run func(ctx context.Context, text string, ref time.Time) ([]ParseResponse, error)) *MockDucklingParser_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWeatherFetcher creates a new instance of MockWeatherFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeatherFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeatherFetcher {
	mock := &MockWeatherFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWeatherFetcher is an autogenerated mock type for the WeatherFetcher type
type MockWeatherFetcher struct {
	mock.Mock
}

type MockWeatherFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWeatherFetcher) EXPECT() *MockWeatherFetcher_Expecter {
	return &MockWeatherFetcher_Expecter{mock: &_m.Mock}
}

// Fetch provides a mock function for the type MockWeatherFetcher
func (_mock *MockWeatherFetcher) Fetch(ctx context.Context, city string) (WeatherInfo, error) {
	ret := _mock.Called(ctx, city)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 WeatherInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (WeatherInfo, error)); ok {
		return returnFunc(ctx, city)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) WeatherInfo); ok {
		r0 = returnFunc(ctx, city)
	} else {
		r0 = ret.Get(0).(WeatherInfo)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, city)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWeatherFetcher_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockWeatherFetcher_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - ctx
//   - city
func (_e *MockWeatherFetcher_Expecter) Fetch(ctx interface{}, city interface{}) *MockWeatherFetcher_Fetch_Call {
	return &MockWeatherFetcher_Fetch_Call{Call: _e.mock.On("Fetch", ctx, city)}
}

func (_c *MockWeatherFetcher_Fetch_Call) Run(run func(ctx context.Context, city string)) *MockWeatherFetcher_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWeatherFetcher_Fetch_Call) Return(weatherInfo WeatherInfo, err error) *MockWeatherFetcher_Fetch_Call {
	_c.Call.Return(weatherInfo, err)
	return _c
}

func (_c *MockWeatherFetcher_Fetch_Call) RunAndReturn(run func(ctx context.Context, city string) (WeatherInfo, error)) *MockWeatherFetcher_Fetch_Call {
	_c.Call.Return(run)
	return _c
}
